--- qmail-1.03-3.3.7/qmail-smtpd.c	2022-09-20 08:31:03.000000000 -0600
+++ qmail-1.03-3.3.9/qmail-smtpd.c	2024-04-15 10:56:17.779708313 -0600
@@ -1309,53 +1309,6 @@
   else tls_init();
 }
 
-RSA *tmp_rsa_cb(SSL *ssl, int export, int keylen)
-{
-  RSA *rsa;
-
-  if (!export) keylen = 2048;
-  if (keylen == 2048) {
-    FILE *in = fopen("control/rsa2048.pem", "r");
-    if (in) {
-      rsa = PEM_read_RSAPrivateKey(in, NULL, NULL, NULL);
-      fclose(in);
-      if (rsa) return rsa;
-    }
-  }
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
-  BIGNUM *e; /*exponent */
-  e = BN_new(); 
-  BN_set_word(e, RSA_F4);
-  if (RSA_generate_key_ex(rsa, keylen, e, NULL) == 1)
-    return rsa;
-  return NULL;
-#else
-  return RSA_generate_key(keylen, RSA_F4, NULL, NULL);
-#endif
-}
-
-DH *tmp_dh_cb(SSL *ssl, int export, int keylen)
-{
-  DH *dh;
-
-  if (!export) keylen = 2048;
-  if (keylen == 2048) {
-    FILE *in = fopen("control/dh2048.pem", "r");
-    if (in) {
-      dh = PEM_read_DHparams(in, NULL, NULL, NULL);
-      fclose(in);
-      if (dh) return dh;
-    }
-  }
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
-  if((dh = DH_new()) && (DH_generate_parameters_ex(dh, keylen, DH_GENERATOR_2, NULL) == 1))
-    return dh;
-  return NULL;
-#else
-  return DH_generate_parameters(keylen, DH_GENERATOR_2, NULL, NULL);
-#endif
-} 
-
 /* don't want to fail handshake if cert isn't verifiable */
 int verify_cb(int preverify_ok, X509_STORE_CTX *x509_ctx) { return 1; }
 
@@ -1545,8 +1498,6 @@
 #endif
   alloc_free(saciphers.s);
 
-  SSL_set_tmp_rsa_callback(myssl, tmp_rsa_cb);
-  SSL_set_tmp_dh_callback(myssl, tmp_dh_cb);
   SSL_set_rfd(myssl, ssl_rfd = substdio_fileno(&ssin));
   SSL_set_wfd(myssl, ssl_wfd = substdio_fileno(&ssout));
 
--- qmail-1.03-3.3.9/qmail-smtpd.c	2024-04-16 12:45:00.994552175 -0600
+++ qmail-1.03-3.3.10/qmail-smtpd.c	2024-04-16 19:17:23.068644210 -0600
@@ -230,7 +230,7 @@
 }
 void smtp_help(arg) char *arg;
 {
-  out("214 netqmail home page: http://qmail.org/netqmail\r\n");
+  out("214 QMT home page: http://www.qmailtoaster.org\r\n");
 }
 void smtp_quit(arg) char *arg;
 {
@@ -1421,24 +1421,18 @@
   X509_STORE *store;
   X509_LOOKUP *lookup;
   int session_id_context = 1; /* anything will do */
+  char tlsver[50];
 
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
-  OPENSSL_init_ssl(OPENSSL_INIT_LOAD_SSL_STRINGS,NULL); /* TLS 1.3 */
+  OPENSSL_init_ssl(OPENSSL_INIT_LOAD_SSL_STRINGS,NULL);
   ctx = SSL_CTX_new(TLS_server_method());
-#else
-  SSL_library_init();                                   /* TLS < 1.3 */
-  ctx = SSL_CTX_new(SSLv23_server_method());
-#endif
   if (!ctx) { tls_err("unable to initialize ctx"); return; }
 
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
-  SSL_CTX_set_options(ctx,SSL_OP_ALL);
+  /* Set min and max protocols */
   SSL_CTX_set_min_proto_version(ctx,TLS1_VERSION);
   SSL_CTX_set_max_proto_version(ctx,TLS1_3_VERSION);
-#else
-  SSL_CTX_set_options(ctx, SSL_OP_NO_SSLv2 | SSL_OP_NO_SSLv3);
-#endif
-
+ 
+  /* Implement all bug workarounds */
+  SSL_CTX_set_options(ctx,SSL_OP_ALL);
   /* renegotiation should include certificate request */
   SSL_CTX_set_options(ctx, SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION);
 
@@ -1462,11 +1456,6 @@
     X509_STORE_set_flags(store, X509_V_FLAG_CRL_CHECK |
                                 X509_V_FLAG_CRL_CHECK_ALL);
   
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
-  /* support ECDH */
-  SSL_CTX_set_ecdh_auto(ctx,1);
-#endif
-
   SSL_CTX_set_verify(ctx, SSL_VERIFY_NONE, NULL);
 
   /* a new SSL object, with the rest added to it directly to avoid copying */
@@ -1479,7 +1468,7 @@
     { SSL_free(myssl); tls_err("no valid RSA private key"); return; }
 
   ciphers = env_get("TLSCIPHERS");
-  if (!ciphers) {
+  if (!ciphers || !*ciphers) {
     if (control_readfile(&saciphers, "control/tlsserverciphers", 0) == -1)
       { SSL_free(myssl); die_control(); }
     if (saciphers.len) { /* convert all '\0's except the last one to ':' */
@@ -1488,14 +1477,11 @@
         if (!saciphers.s[i]) saciphers.s[i] = ':';
       ciphers = saciphers.s;
     }
+    else ciphers = "DEFAULT";
   }
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
-  if (!ciphers || !*ciphers) ciphers = "TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256";
-  SSL_set_ciphersuites(myssl,ciphers); /* TLS 1.3 */
-#else
-  if (!ciphers || !*ciphers) ciphers = "DEFAULT";
+
+  SSL_set_ciphersuites(myssl,ciphers); /* TLS >= 1.3 */
   SSL_set_cipher_list(myssl,ciphers);  /* TLS < 1.3 */
-#endif
   alloc_free(saciphers.s);
 
   SSL_set_rfd(myssl, ssl_rfd = substdio_fileno(&ssin));
@@ -1512,6 +1498,8 @@
 
   /* populate the protocol string, used in Received */
   if (!stralloc_copys(&proto, "ESMTPS (")
+    || !stralloc_cats(&proto, SSL_get_version(ssl))
+    || !stralloc_cats(&proto, " ")
     || !stralloc_cats(&proto, SSL_get_cipher(ssl))
     || !stralloc_cats(&proto, " encrypted)")) die_nomem();
   if (!stralloc_0(&proto)) die_nomem();
--- qmail-1.03-3.3.10/qmail-smtpd.c	2024-04-17 12:17:02.957695384 -0600
+++ qmail-1.03-3.3.11/qmail-smtpd.c	2024-04-18 06:37:33.427406288 -0600
@@ -1428,8 +1428,8 @@
   if (!ctx) { tls_err("unable to initialize ctx"); return; }
 
   /* Set min and max protocols */
-  SSL_CTX_set_min_proto_version(ctx,TLS1_VERSION);
-  SSL_CTX_set_max_proto_version(ctx,TLS1_3_VERSION);
+  SSL_CTX_set_min_proto_version(ctx,0); // Set minimum protocol allowed by the system 
+  SSL_CTX_set_max_proto_version(ctx,0); // Set maximum protocol allowed by the system
  
   /* Implement all bug workarounds */
   SSL_CTX_set_options(ctx,SSL_OP_ALL);
--- qmail-1.03-3.3.10/qmail-remote.c	2024-04-17 12:16:51.490020756 -0600
+++ qmail-1.03-3.3.11/qmail-remote.c	2024-04-18 06:39:39.925831840 -0600
@@ -426,26 +426,19 @@
     }
   }
 
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
    OPENSSL_init_ssl(OPENSSL_INIT_LOAD_SSL_STRINGS,NULL); /* TLS 1.3 */
    ctx = SSL_CTX_new(TLS_client_method());
-#else
-   SSL_library_init();                                   /* TLS < 1.3 */
-   ctx = SSL_CTX_new(SSLv23_client_method());
-#endif
-  if (!ctx) {
-    if (!smtps && !servercert) return 0;
-    smtptext.len = 0;
-    tls_quit_error("ZTLS error initializing ctx");
-  }
+   if (!ctx) {
+     if (!smtps && !servercert) return 0;
+     smtptext.len = 0;
+     tls_quit_error("ZTLS error initializing ctx");
+   }
 
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
+  /* Implement all bug workarounds */
   SSL_CTX_set_options(ctx,SSL_OP_ALL);
-  SSL_CTX_set_min_proto_version(ctx,TLS1_VERSION);
-  SSL_CTX_set_max_proto_version(ctx,TLS1_3_VERSION);
-#else
-  SSL_CTX_set_options(ctx, SSL_OP_NO_SSLv2 | SSL_OP_NO_SSLv3);
-#endif
+  /* Set min and max protocols */
+  SSL_CTX_set_min_proto_version(ctx,0); // Set minimum protocol allowed by the system
+  SSL_CTX_set_max_proto_version(ctx,0); // Set maximum protocol allowed by the system
 
   if (servercert) {
     if (!SSL_CTX_load_verify_locations(ctx, servercert, NULL)) {
@@ -463,9 +456,7 @@
     SSL_CTX_use_RSAPrivateKey_file(ctx, CLIENTCERT, SSL_FILETYPE_PEM);
 # undef CLIENTCERT
 
-#if OPENSSL_VERSION_NUMBER >= 0x10101000L
   SSL_CTX_set_post_handshake_auth(ctx, 1);
-#endif
 
   myssl = SSL_new(ctx);
   SSL_CTX_free(ctx);
@@ -485,13 +476,10 @@
       if (!saciphers.s[i]) saciphers.s[i] = ':';
     ciphers = saciphers.s;
   }
-#if OPENSSL_VERSION_NUMBER >= 0x10100000L
-  else ciphers = "TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256:TLS_AES_128_GCM_SHA256";
-  SSL_set_ciphersuites(myssl,ciphers); /* TLS 1.3 */
-#else
   else ciphers = "DEFAULT";
+
+  SSL_set_ciphersuites(myssl,ciphers); /* TLS >= 1.3 */
   SSL_set_cipher_list(myssl,ciphers);  /* TLS < 1.3 */
-#endif
   alloc_free(saciphers.s);
 
   SSL_set_fd(myssl, smtpfd);
